# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2019, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

[DEFAULT]
# AWS sync
# Uncomment to upload results on S3
upload_dir = "s3://jgordon/ray/results"
sync_function = "aws s3 sync `dirname {local_dir}` {remote_dir}/`basename $(dirname {local_dir})`"

# Set to 'True' to save/restore the model on every iteration and repetition
restore_supported = True

experiment = grid
path = ~/nta/results
data_dir = ~/nta/datasets

# Data
input_size = (1, 28, 28)
output_size = 784
dataset = mnist

# Network parameters
m_groups = 200
n_cells_per_group = 6
k_winners = 25
k_winner_cells = 1
gamma = 0.5
eps = 0.0

sequences = [[0,1,2,3, 0,1,2,3, 0,3,2,1]]
seq_length = 12
predictor_hidden_size=1200
predictor_output_size=4

iterations = 200
repetitions = 1
batch_size = 300
embed_dim = 0  # No embedding
vocab_size = 0
learning_rate = 0.0005
learning_rate_gamma =  0 # 0.1
learning_rate_min = 0.000005
batches_in_epoch = 500
momentum = 0.9
lr_step_schedule = None # [20, 40, 60]
optimizer=adam
loss_function = MSELoss
save_onnx_graph_at_checkpoint = False

gpu_percentage = 1.0

stop = {"stop": 1}
checkpoint_at_end = True
eval_interval = 5
eval_batches_in_epoch = 50

################
[RSM_MNIST_Paper]

[RSM_MNIST_Branching]
randomize_sequences = True
sequences = [[0,1,2,3], [0,1,2,3], [0,3,2,1]]
seq_length=12
predictor_output_size=4

[RSM_MNIST_Branching_Bal]
iterations = 30
randomize_sequences = True
sequences = [[0,1,2,3], [0,3,2,1]]
seq_length = 8
predictor_output_size=4

[RSM_MNIST_Branching_ClearMem]
iterations = 30
randomize_sequences = True
sequences = [[0,1,2,3], [0,3,2,1]]
seq_length = 8
predictor_output_size=4
clear_memory_each_subseq = True

[RSM_MNIST_Branching_StaticDigit]
iterations = 30
randomize_sequences = True
sequences = [[0,1,2,3], [0,3,2,1]]
seq_length = 8
predictor_output_size=4
static_digit = True

################
[RSM_MNIST_2Cells]
k_winner_cells = 2

################
[RSM_MNIST_ActiveDend]
active_dendrites = 2

################
[RSM_MNIST_ColOutputCell]
# Clamp x cells per group/column to max value prior to k-winners
# Possibly provides a useful column-level representation to memory and
# increases overlap between similar representations?
# Use k_winner_cells > 1 since winners chosen after output cells clamped
k_winner_cells = 2
col_output_cells = 1  


[RSM_MNIST_Debug]
iterations = 10
batch_size = 20
m_groups = 8
n_cells_per_group = 4
k_winners = 2
k_winner_cells = 1
randomize_sequences = True
sequences = [[0,1,2,3], [0,3,2,1]]
seq_length = 8
predictor_output_size=4
predictor_hidden_size=10
static_digit = True

