# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2019, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

[DEFAULT]
path = results

# Set to 'True' to save/restore the model on every iteration and repetition
restore_supported = True

experiment = grid

# Training
weight_decay = 0.0005

# Common network parameters
input_shape = (3, 32, 32)
boost_strength = 1.5
boost_strength_factor = 0.85
k_inference_factor = 1.5

# Three layer specific parameters:
iterations = 200
repetitions = 5
batch_size = 64
batches_in_epoch = 250
first_epoch_batch_size = 4
batches_in_first_epoch = 600
test_batch_size = 128
test_batches_in_epoch = 500
learning_rate = 0.1
momentum = 0.5
learning_rate_gamma = 0.97

network_type = tiny_sparse
cnn_percent_on = tune.sample_from(lambda spec: [np.random.uniform(0.05,0.3), np.random.uniform(0.05,0.3), np.random.uniform(0.05,0.3)])
cnn_weight_sparsity = tune.sample_from(lambda spec: [np.random.uniform(0.2,1.0), np.random.uniform(0.2,1.0), np.random.uniform(0.2,1.0)])
cnn_kernel_size = [5, 5, 3]
cnn_out_channels = tune.sample_from(lambda spec: [np.random.randint(32,128), np.random.randint(32,128), np.random.randint(32,128)])
linear_n = tune.sample_from(lambda spec: np.random.randint(200,800))
linear_percent_on = tune.sample_from(lambda spec: np.random.uniform(0.1,0.3))
weight_sparsity = tune.sample_from(lambda spec: np.random.uniform(0.1,1.0))

stop = {"stop": 1}
checkpoint_at_end = True


[sparse3LayerSearch1]
cnn_percent_on = tune.sample_from(lambda spec: [np.random.uniform(0.05,0.3), np.random.uniform(0.05,0.3), np.random.uniform(0.05,0.3)])
cnn_weight_sparsity = tune.sample_from(lambda spec: [np.random.uniform(0.2,1.0), np.random.uniform(0.2,1.0), np.random.uniform(0.2,1.0)])
cnn_kernel_size = [5, 5, 3]
cnn_out_channels = tune.sample_from(lambda spec: [np.random.randint(32,128), np.random.randint(32,128), np.random.randint(32,128)])
linear_n = tune.sample_from(lambda spec: np.random.randint(200,800))
linear_percent_on = tune.sample_from(lambda spec: np.random.uniform(0.1,0.3))
weight_sparsity = tune.sample_from(lambda spec: np.random.uniform(0.1,1.0))
repetitions = 7


[sparse3LayerSearch2]
cnn_percent_on = tune.sample_from(lambda spec: [np.random.randint(5,30)/100.0, np.random.randint(5,30)/100.0, np.random.randint(5,30)/100.0])
cnn_weight_sparsity = tune.sample_from(lambda spec: [np.random.randint(20,100)/100.0, np.random.randint(20,100)/100.0, np.random.randint(20,100)/100.0])
cnn_kernel_size = [5, 5, 3]
cnn_out_channels = tune.sample_from(lambda spec: [np.random.randint(32,128), np.random.randint(32,128), np.random.randint(32,128)])
linear_n = tune.sample_from(lambda spec: np.random.randint(200,800))
linear_percent_on = tune.sample_from(lambda spec: np.random.randint(10,30)/100.0)
weight_sparsity = tune.sample_from(lambda spec: np.random.randint(10,100)/100.0)
repetitions = 3


[decent]
iterations = 150
cnn_percent_on = [ 0.27, 0.14, 0.17 ]
cnn_weight_sparsity = [ 0.45, 0.88, 0.74 ]
cnn_kernel_size = [5, 5, 3]
cnn_out_channels = [ 125, 93, 103 ]
linear_n = 578
linear_percent_on = 0.28
weight_sparsity = 0.93
repetitions = 1

