# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2019, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

[DEFAULT]
# changed path to a more generic location outside project folder
# will allow comparison in tensorboard
path = "~/nta/results"

# AWS sync
# Uncomment to upload results on S3
upload_dir = "s3://lsouza/ray/results"
sync_function = "aws s3 sync `dirname {local_dir}` {remote_dir}/`basename $(dirname {local_dir})`"


# Set to 'True' to save/restore the model on every iteration and repetition
restore_supported = True
experiment = grid

# Including dataset and output size as part of config
output_size = 100
dataset = CIFAR100

# Including fixed path to dataset
data_dir = "~/nta/datasets"

# Training
weight_decay = 0.0005

# Common network parameters
input_shape = (3, 32, 32)
boost_strength = 1.5
boost_strength_factor = 0.85
k_inference_factor = 1.5

# Three layer specific parameters:
iterations = 200
repetitions = 5
batch_size = 64
batches_in_epoch = 250
first_epoch_batch_size = 4
batches_in_first_epoch = 600
test_batch_size = 128
test_batches_in_epoch = 500
learning_rate = 0.1
momentum = 0.5
learning_rate_gamma = 0.97

network_type = vgg
block_sizes = [1, 1, 1]
cnn_percent_on = [0.1, 0.1, 1.0]
cnn_weight_sparsity = [1.0, 0.5, 1.0]
cnn_kernel_size = [5, 5, 3]
cnn_out_channels = [10, 12, 14]
linear_n = [50, 60]
linear_percent_on = [0.2, 1.0]
weight_sparsity = [0.3, 1.0]

stop = {"stop": 1}
checkpoint_at_end = True

[quick]
iterations = 3
repetitions = 1
batch_size = 4
batches_in_epoch = 4
first_epoch_batch_size = 4
batches_in_first_epoch = 4
test_batch_size = 4
test_batches_in_epoch = 4
block_sizes = [2, 3, 1]

[VGG19SparseTest9v2]
weight_decay = 0.0005
learning_rate_gamma = 0.1
lr_step_schedule = [81, 122]
learning_rate = 0.1
momentum = tune.grid_search([0.5, 0.9])
batch_size = 128
batches_in_epoch = 400
use_max_pooling = True
iterations = 205
repetitions = 4
k_inference_factor = 1.0
block_sizes = [2,2,4,4,4]
cnn_out_channels = [64, 128, 256, 512, 512]
cnn_percent_on = tune.sample_from(lambda spec: [np.random.randint(15,30)/100.0]*5)
;cnn_percent_on = [0.2, 0.2, 0.2, 0.2, 0.3]
cnn_weight_sparsity = [1.0, 0.5, 0.5, 0.5, 0.5]
cnn_kernel_size = [3, 3, 3, 3, 3]
linear_n = []
linear_percent_on = []
weight_sparsity = []

checkpoint_at_end = True
gpu_percentage = 1.0

[VGG19DenseTest9v2]
weight_decay = 0.0005
learning_rate_gamma = 0.1
lr_step_schedule = [81, 122]
learning_rate = 0.1
momentum = tune.grid_search([0.5, 0.9])
batch_size = 128
batches_in_epoch = 400
use_max_pooling = True
iterations = 205
repetitions = 4
k_inference_factor = 1.0
block_sizes = [2,2,4,4,4]
cnn_out_channels = [64, 128, 256, 512, 512]
cnn_percent_on = [1.0, 1.0, 1.0, 1.0, 1.0]
cnn_weight_sparsity = [1.0, 1.0, 1.0, 1.0, 1.0]
cnn_kernel_size = [3, 3, 3, 3, 3]
linear_n = []
linear_percent_on = []
weight_sparsity = [1.0]

checkpoint_at_end = True
gpu_percentage = 0.2

[VGG19QuickTest]
weight_decay = 0.0005
learning_rate_gamma = 0.1
lr_step_schedule = [81, 122]
learning_rate = 0.1
momentum = 0.5
batch_size = 128
batches_in_epoch = 400
use_max_pooling = True
iterations = 205
repetitions = 4
k_inference_factor = 1.0
block_sizes = [2,2,4,4,4]
cnn_out_channels = [64, 128, 256, 512, 512]
cnn_percent_on = [0.2, 0.2, 0.2, 0.2, 0.3]
cnn_weight_sparsity = [1.0, 0.5, 0.5, 0.5, 0.5]
cnn_kernel_size = [3, 3, 3, 3, 3]
linear_n = []
linear_percent_on = []
weight_sparsity = []

checkpoint_at_end = True
gpu_percentage = 0.2
cpu_percentage = 1.0
