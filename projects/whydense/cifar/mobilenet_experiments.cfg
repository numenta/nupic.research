# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2019, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

[DEFAULT]
path = results
seed = 18

# Uncomment to upload results on S3
;upload_dir = "s3://bucketname/ray"
;sync_function = "aws s3 sync `dirname {local_dir}` {remote_dir}/`basename $(dirname {local_dir})`"

verbose = 0
checkpoint_freq = 0
checkpoint_at_end = True

# Training
iterations = 100
batch_size = 64
batches_in_epoch = 100000

# Optimizer
learning_rate = 0.001
learning_rate_gamma = 0.1
lr_step_size = 50
momentum = 0.9
weight_decay = 0.0005
loss_function = nn.functional.cross_entropy

# Testing
test_batch_size = 256
test_batches_in_epoch = %(batches_in_epoch)s

# MobileNetV1 parameters
model_type = MobileNetV1
width_mult = 1.0
num_classes = 10

# Sparse parameters
first_epoch_batch_size = %(batch_size)s
batches_in_first_epoch = %(batches_in_epoch)s

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[mobilenetv1]
model_type = MobileNetV1
model_params = {
    "width_mult": %(width_mult)s,
    "num_classes": %(num_classes)s
 }

[mobilenetv1_sparse]
first_epoch_batch_size = 5
batches_in_first_epoch = 10000
model_type = MobileNetV1SparseDepth
model_params = {
    "width_mult": %(width_mult)s,
    "num_classes": %(num_classes)s,
    "boost_strength": 1.5,
    "boost_strength_factor": 0.85,
    "duty_cycle_period": 1000,
    "k_inference_factor": 1.5,
    "percent_on": 0.3
  }

[mobilenetv1_quick]
verbose = 2
iterations = 1
lr_step_size = 1
batches_in_epoch = 1
model_type = MobileNetV1
model_params = {
    "width_mult": %(width_mult)s,
    "num_classes": %(num_classes)s
 }

[mobilenetv1_tune_lr_step_size]
queue_trials = True
checkpoint_freq = 1
# Cannot pass functions to "ray.tune".
# Make sure to use string in the config and evaluate during "_setup"
loss_function = "nn.functional.cross_entropy"
model_type = "MobileNetV1"
model_params = {
    "width_mult": %(width_mult)s,
    "num_classes": %(num_classes)s
 }
lr_step_size = tune.grid_search([20, 30, 40, 50])
scheduler = tune.schedulers.MedianStoppingRule(
    reward_attr='mean_accuracy',
    time_attr='training_iteration',
    grace_period=30.0)

[mobilenetv1_tune_percent_on]
queue_trials = True
checkpoint_freq = 1
first_epoch_batch_size = 5
batches_in_first_epoch = 10000
scheduler = tune.schedulers.MedianStoppingRule(
    reward_attr='mean_accuracy',
    time_attr='training_iteration',
    grace_period=10.0)
# Cannot pass functions to "ray.tune". Make sure to use string in the config
# and evaluate during "_setup"
loss_function = "nn.functional.cross_entropy"
model_type = tune.grid_search(["MobileNetV1SparsePoint", "MobileNetV1SparseDepth"])
model_params = {
    "width_mult": %(width_mult)s,
    "num_classes": %(num_classes)s,
    "percent_on": tune.grid_search([0.1, 0.2, 0.3]),
    "boost_strength": 1.5,
    "boost_strength_factor": 0.85,
    "k_inference_factor": 1.5,
    "duty_cycle_period": 1000
  }
