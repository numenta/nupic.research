# ----------------------------------------------------------------------
# Numenta Platform for Intelligent Computing (NuPIC)
# Copyright (C) 2019, Numenta, Inc.  Unless you have an agreement
# with Numenta, Inc., for a separate license for this software code, the
# following terms and conditions apply:
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero Public License for more details.
#
# You should have received a copy of the GNU Affero Public License
# along with this program.  If not, see http://www.gnu.org/licenses.
#
# http://numenta.org/licenses/
# ----------------------------------------------------------------------

[DEFAULT]
path = ~/nta/results/whydense/cifar
data_dir = ~/nta/data

# AWS sync
# Uncomment to upload results on S3
;upload_dir = "s3://sahmad/ray/results"
;sync_function = "aws s3 sync `dirname {local_dir}` {remote_dir}/`basename $(dirname {local_dir})`"

# Set to 'True' to save/restore the model on every iteration and repetition
restore_supported = True

experiment = grid

# Common network parameters
input_shape = (3, 32, 32)
boost_strength = 1.5
boost_strength_factor = 0.85
k_inference_factor = 1.0

iterations = 200
repetitions = 5
batch_size = 128
batches_in_epoch = 400
first_epoch_batch_size = 4
batches_in_first_epoch = 600
test_batch_size = 128
test_batches_in_epoch = 500
learning_rate = 0.1
momentum = 0.9
learning_rate_gamma = 0.1
lr_step_schedule = [81, 122]
weight_decay = 0.0005

network_type = vgg
block_sizes = [2,2,4,4,4]
cnn_out_channels = [64, 128, 256, 512, 512]
cnn_kernel_size = [3, 3, 3, 3, 3]
linear_n = []
linear_percent_on = []
weight_sparsity = []

stop = {"stop": 1}
checkpoint_at_end = True

# VGG19-Dense - standard VGG 19
# Based on https://github.com/bearpaw/pytorch-classification
# Uses their parameters and learning schedule
[VGG19Dense]
batch_size = 128
batches_in_epoch = 400
first_epoch_batch_size = 128
batches_in_first_epoch = 400
use_max_pooling = True
iterations = 200
repetitions = 5
k_inference_factor = 1.0
cnn_percent_on = [1.0, 1.0, 1.0, 1.0, 1.0]
cnn_weight_sparsity = [1.0, 1.0, 1.0, 1.0, 1.0]

gpu_percentage = 1.0


# VGG19-Sparse
# Same as VGG19Dense except that
[VGG19Sparse]
batch_size = 128
batches_in_epoch = 400
use_max_pooling = True
iterations = 150
repetitions = 5
cnn_percent_on = [0.25, 0.25, 0.25, 0.25, 0.25]
cnn_weight_sparsity = [1.0, 0.5, 0.5, 0.5, 0.5]

gpu_percentage = 1.0

